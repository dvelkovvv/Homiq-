const express = require('express');
const { Pool } = require('pg');
const multer = require('multer');
const path = require('path');
const axios = require('axios');
require('dotenv').config();

const app = express();
const port = process.env.PORT || 3000;

// Neon база данни
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// Multer за файлове
const storage = multer.diskStorage({
  destination: './public/uploads/',
  filename: (req, file, cb) => cb(null, Date.now() + path.extname(file.originalname))
});
const upload = multer({ storage });

// Статични файлове
app.use(express.static('public'));
app.use(express.json());

// Инициализация на базата
async function initDatabase() {
  await pool.query(`
    CREATE TABLE IF NOT EXISTS properties (
      id SERIAL PRIMARY KEY,
      address VARCHAR(255),
      area INT,
      lat FLOAT,
      lng FLOAT,
      metro_distance FLOAT,
      green_zones INT
    );
    CREATE TABLE IF NOT EXISTS documents (
      id SERIAL PRIMARY KEY,
      property_id INT REFERENCES properties(id),
      file_path VARCHAR(255),
      type VARCHAR(50)
    );
  `);
}
initDatabase();

// Маршрут за търсене на адрес и данни
app.get('/search-location', async (req, res) => {
  const { address } = req.query;
  const apiKey = process.env.GOOGLE_MAPS_API_KEY;

  try {
    // Geocoding за координати
    const geoResponse = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(address)}&key=${apiKey}`);
    const location = geoResponse.data.results[0]?.geometry.location;
    if (!location) throw new Error('Адресът не е намерен');

    const { lat, lng } = location;

    // Places API за метро и зелени зони
    const placesResponse = await axios.get(`https://maps.googleapis.com/maps/api/place/nearbysearch/json`, {
      params: {
        location: `${lat},${lng}`,
        radius: 5000, // 5 км обхват
        type: 'subway_station|park', // метро и паркове
        key: apiKey
      }
    });

    const places = placesResponse.data.results;
    const metro = places.find(p => p.types.includes('subway_station'));
    const greenZones = places.filter(p => p.types.includes('park')).length;

    // Изчисляване на разстояние до метро (в метри)
    const metroDistance = metro ? calculateDistance(lat, lng, metro.geometry.location.lat, metro.geometry.location.lng) : null;

    res.json({
      lat,
      lng,
      metroDistance,
      greenZones,
      formattedAddress: geoResponse.data.results[0].formatted_address
    });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// Функция за изчисляване на разстояние (в метри)
function calculateDistance(lat1, lon1, lat2, lon2) {
  const R = 6371e3; // Радиус на Земята в метри
  const φ1 = lat1 * Math.PI / 180;
  const φ2 = lat2 * Math.PI / 180;
  const Δφ = (lat2 - lat1) * Math.PI / 180;
  const Δλ = (lon2 - lon1) * Math.PI / 180;

  const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +
            Math.cos(φ1) * Math.cos(φ2) *
            Math.sin(Δλ / 2) * Math.sin(Δλ / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

  return R * c; // Разстояние в метри
}

// Маршрут за добавяне на имот
app.post('/add-property', upload.array('documents', 5), async (req, res) => {
  const { address, area, lat, lng, metroDistance, greenZones } = req.body;
  const files = req.files;

  try {
    const propertyResult = await pool.query(
      'INSERT INTO properties (address, area, lat, lng, metro_distance, green_zones) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id',
      [address, area, lat, lng, metroDistance || null, greenZones || 0]
    );
    const propertyId = propertyResult.rows[0].id;

    for (const file of files) {
      await pool.query(
        'INSERT INTO documents (property_id, file_path, type) VALUES ($1, $2, $3)',
        [propertyId, `/uploads/${file.filename}`, file.mimetype.includes('image') ? 'photo' : 'document']
      );
    }

    res.json({ success: true, propertyId });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.listen(port, () => console.log(`Server running on port ${port}`));
import { useEffect, useState, useRef } from "react";
import { useLocation } from "wouter";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Logo } from "@/components/logo";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { Trophy, Download } from "lucide-react";
import jsPDF from 'jspdf';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';
import { Bar } from 'react-chartjs-2';

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend
);

export default function Step3() {
  // –ò–∑–≤–ª–∏—á–∞–º–µ propertyId –æ—Ç URL
  const propertyId = new URLSearchParams(window.location.search).get('propertyId');
  const [, navigate] = useLocation();
  const [loading, setLoading] = useState(true);
  const [score, setScore] = useState(0);
  const chartRef = useRef<any>(null);

  useEffect(() => {
    if (!propertyId) {
      navigate('/evaluation/step1');
      return;
    }

    // –°–∏–º—É–ª–∏—Ä–∞–º–µ –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞ –æ—Ü–µ–Ω–∫–∞—Ç–∞
    const calculateEvaluation = async () => {
      try {
        const evaluation = {
          propertyId: parseInt(propertyId),
          score: 85,
          estimatedValue: 250000,
          recommendations: [
            '–û–±–º–∏—Å–ª–µ—Ç–µ –º–∞–ª–∫–∏ —Ä–µ–º–æ–Ω—Ç–∏ –∑–∞ —É–≤–µ–ª–∏—á–∞–≤–∞–Ω–µ –Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç—Ç–∞',
            '–õ–æ–∫–∞—Ü–∏—è—Ç–∞ –Ω–∞ –∏–º–æ—Ç–∞ –µ –º–Ω–æ–≥–æ —Ç—ä—Ä—Å–µ–Ω–∞',
            '–ü–æ–¥—Ö–æ–¥—è—â –º–æ–º–µ–Ω—Ç –∑–∞ –ø—Ä–æ–¥–∞–∂–±–∞ —Å–ø–æ—Ä–µ–¥ –ø–∞–∑–∞—Ä–Ω–∏—Ç–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏'
          ]
        };

        const response = await fetch('/api/evaluations', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(evaluation)
        });

        if (!response.ok) {
          throw new Error('Failed to create evaluation');
        }

        setScore(85);
        setLoading(false);
      } catch (error) {
        console.error('Error creating evaluation:', error);
        setLoading(false);
      }
    };

    calculateEvaluation();
  }, [propertyId, navigate]);

  const chartData = {
    labels: ['–í–∞—à–∏—è—Ç –∏–º–æ—Ç', '–°—Ä–µ–¥–µ–Ω –∑–∞ —Ä–∞–π–æ–Ω–∞'],
    datasets: [
      {
        label: '–û—Ü–µ–Ω–µ–Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç (EUR)',
        data: [250000, 230000],
        backgroundColor: ['#003366', '#4CAF50'],
      },
    ],
  };

  const generatePDF = () => {
    const pdf = new jsPDF('p', 'mm', 'a4');

    // –ó–∞–≥–ª–∞–≤–∏–µ
    pdf.setFontSize(20);
    pdf.setTextColor(0, 51, 102); // #003366
    pdf.text('Homiq - –û—Ü–µ–Ω–∫–∞ –Ω–∞ –∏–º–æ—Ç', 20, 20);

    // –û—Å–Ω–æ–≤–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    pdf.setFontSize(14);
    pdf.setTextColor(0, 0, 0);
    pdf.text(`–û—Ü–µ–Ω–µ–Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç: ‚Ç¨250,000`, 20, 40);
    pdf.text(`–û—Ü–µ–Ω–∫–∞: ${score}/100`, 20, 50);

    // –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞—Ç–∞
    if (chartRef.current) {
      const chartImage = chartRef.current.toBase64Image();
      pdf.addImage(chartImage, 'PNG', 20, 60, 170, 100);
    }

    // –ü—Ä–µ–ø–æ—Ä—ä–∫–∏
    pdf.setFontSize(12);
    pdf.text('–ü—Ä–µ–ø–æ—Ä—ä–∫–∏:', 20, 170);
    pdf.text('‚Ä¢ –û–±–º–∏—Å–ª–µ—Ç–µ –º–∞–ª–∫–∏ —Ä–µ–º–æ–Ω—Ç–∏ –∑–∞ —É–≤–µ–ª–∏—á–∞–≤–∞–Ω–µ –Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç—Ç–∞', 25, 180);
    pdf.text('‚Ä¢ –õ–æ–∫–∞—Ü–∏—è—Ç–∞ –Ω–∞ –∏–º–æ—Ç–∞ –µ –º–Ω–æ–≥–æ —Ç—ä—Ä—Å–µ–Ω–∞', 25, 190);
    pdf.text('‚Ä¢ –ü–æ–¥—Ö–æ–¥—è—â –º–æ–º–µ–Ω—Ç –∑–∞ –ø—Ä–æ–¥–∞–∂–±–∞ —Å–ø–æ—Ä–µ–¥ –ø–∞–∑–∞—Ä–Ω–∏—Ç–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏', 25, 200);

    // –ü–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    pdf.text('–ü–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', 20, 220);
    pdf.text('üèÜ –ü—ä—Ä–≤–∞ –æ—Ü–µ–Ω–∫–∞ (100 —Ç–æ—á–∫–∏)', 25, 230);
    pdf.text('üìÑ Document Master (200 —Ç–æ—á–∫–∏)', 25, 240);

    // –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ PDF
    pdf.save('homiq-–æ—Ü–µ–Ω–∫–∞.pdf');
  };

  return (
    <div className="min-h-screen bg-background">
      <header className="border-b">
        <div className="container mx-auto px-4 h-16 flex items-center">
          <Logo />
        </div>
      </header>

      <main className="container mx-auto px-4 py-8">
        <Card className="max-w-2xl mx-auto">
          <CardHeader>
            <CardTitle>–†–µ–∑—É–ª—Ç–∞—Ç–∏ –æ—Ç –æ—Ü–µ–Ω–∫–∞—Ç–∞</CardTitle>
          </CardHeader>
          <CardContent>
            {loading ? (
              <div className="space-y-4 text-center py-8">
                <Progress value={score} />
                <p>–ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —Å—Ç–æ–π–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ –∏–º–æ—Ç–∞...</p>
              </div>
            ) : (
              <div className="space-y-6">
                <div className="text-center">
                  <h3 className="text-2xl font-bold text-[#003366]">
                    –û—Ü–µ–Ω–µ–Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç: ‚Ç¨250,000
                  </h3>
                  <p className="text-sm text-gray-500 mt-1">
                    –ë–∞–∑–∏—Ä–∞–Ω–∞ –Ω–∞ —Ç–µ–∫—É—â–∏—Ç–µ –ø–∞–∑–∞—Ä–Ω–∏ —É—Å–ª–æ–≤–∏—è –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∞ –∏–º–æ—Ç–∞
                  </p>
                </div>

                <div>
                  <h4 className="font-medium mb-2">–û—Ü–µ–Ω–∫–∞ –Ω–∞ –∏–º–æ—Ç–∞</h4>
                  <Progress value={score} className="h-4" />
                  <p className="text-sm text-gray-500 mt-1">
                    –í–∞—à–∏—è—Ç –∏–º–æ—Ç –ø–æ–ª—É—á–∞–≤–∞ {score}/100 —Ç–æ—á–∫–∏ –±–∞–∑–∏—Ä–∞–Ω–∏ –Ω–∞ –ª–æ–∫–∞—Ü–∏—è, —Å—ä—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–∞–∑–∞—Ä–Ω–æ —Ç—ä—Ä—Å–µ–Ω–µ
                  </p>
                </div>

                <div>
                  <h4 className="font-medium mb-4">–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç—Ç–∞</h4>
                  <div className="h-[200px]">
                    <Bar ref={chartRef} data={chartData} options={{ maintainAspectRatio: false }} />
                  </div>
                </div>

                <div>
                  <h4 className="font-medium mb-2">–ü–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h4>
                  <div className="flex gap-2">
                    <Badge variant="outline" className="flex items-center gap-1">
                      <Trophy className="h-3 w-3" />
                      –ü—ä—Ä–≤–∞ –æ—Ü–µ–Ω–∫–∞
                    </Badge>
                    <Badge variant="outline" className="flex items-center gap-1">
                      <Trophy className="h-3 w-3" />
                      100 Homiq —Ç–æ—á–∫–∏
                    </Badge>
                  </div>
                </div>

                <div className="bg-muted p-4 rounded-lg">
                  <h4 className="font-medium mb-2">–ü—Ä–µ–ø–æ—Ä—ä–∫–∏</h4>
                  <ul className="list-disc pl-5 space-y-1">
                    <li>–û–±–º–∏—Å–ª–µ—Ç–µ –º–∞–ª–∫–∏ —Ä–µ–º–æ–Ω—Ç–∏ –∑–∞ —É–≤–µ–ª–∏—á–∞–≤–∞–Ω–µ –Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç—Ç–∞</li>
                    <li>–õ–æ–∫–∞—Ü–∏—è—Ç–∞ –Ω–∞ –∏–º–æ—Ç–∞ –µ –º–Ω–æ–≥–æ —Ç—ä—Ä—Å–µ–Ω–∞</li>
                    <li>–ü–æ–¥—Ö–æ–¥—è—â –º–æ–º–µ–Ω—Ç –∑–∞ –ø—Ä–æ–¥–∞–∂–±–∞ —Å–ø–æ—Ä–µ–¥ –ø–∞–∑–∞—Ä–Ω–∏—Ç–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏</li>
                  </ul>
                </div>

                <Button
                  onClick={generatePDF}
                  className="w-full flex items-center justify-center gap-2 bg-[#4CAF50] hover:bg-[#45a049]"
                >
                  <Download className="h-4 w-4" />
                  –ò–∑—Ç–µ–≥–ª–∏ PDF —Å –æ—Ü–µ–Ω–∫–∞—Ç–∞
                </Button>
              </div>
            )}
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button variant="outline" onClick={() => navigate("/evaluation/step2")}>
              –ù–∞–∑–∞–¥
            </Button>
            <Button onClick={() => navigate("/")} className="bg-[#003366] hover:bg-[#002244]">
              –ó–∞–≤—ä—Ä—à–∏
            </Button>
          </CardFooter>
        </Card>
      </main>
    </div>
  );
}